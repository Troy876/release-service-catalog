---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-validate-fbc-fragments-integration
spec:
  description: Test managed validate-fbc-fragments task integration; should succeed with valid components.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
      taskSpec:
        params:
          - name: snapshotPath
            type: string
            description: Path to the JSON string of the mapped Snapshot spec in the data workspace
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        results:
          - name: sourceDataArtifact
            description: Location of trusted artifacts to be used to populate data directory
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:cee1fd0191e750b0736d8197701d91ce2f308e03
            script: |
              #!/usr/bin/env bash
              
              # Ensure data directory exists
              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              
              # Create test data for successful validation (using actual FBC test images)
              cat > "$(params.dataDir)/$(params.snapshotPath)" << 'EOF'
              {
                "components": [
                  {
                    "name": "test-fbc-component-1",
                    "containerImage": "quay.io/hacbs-release-tests/test-ocp-version/test-fbc-component@sha256:f6e744662e342c1321deddb92469b55197002717a15f8c0b1bb2d9440aac2297"
                  },
                  {
                    "name": "test-fbc-component-2",
                    "containerImage": "quay.io/hacbs-release-tests/test-ocp-version/test-fbc-component@sha256:f6e744662e342c1321deddb92469b55197002717a15f8c0b1bb2d9440aac2297"
                  }
                ]
              }
              EOF
              
              cat > "$(params.dataDir)/data.json" << 'EOF'
              {
                "fbc": {
                  "allowedPackages": [
                    "test-operator", "example-operator", "test-package", "test-package-1", "test-package-2"
                  ],
                  "hotfix": false,
                  "preGA": false,
                  "stagedIndex": false
                }
              }
              EOF
              
              echo "Test data created for integration test"
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: prepare-fbc-parameters
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
        - name: dataPath
          value: data.json
        - name: pyxisSecret
          value: test-pyxis-secret
        - name: pyxisServer
          value: production
        - name: ociArtifactExpiresAfter
          value: $(params.ociArtifactExpiresAfter)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: taskGitUrl
          value: https://github.com/konflux-ci/release-service-catalog.git
        - name: taskGitRevision
          value: development
        - name: pipelineRunUid
          value: "test-pipeline-run-uid"
      runAfter:
        - setup