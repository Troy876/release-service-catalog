---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sign-base64-blob
  labels:
    app.kubernetes.io/version: "2.5.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create an internalrequest to sign a base64 encoded blob.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: blob
      type: string
      description: The base64 encoded blob to be signed.
    - name: requester
      type: string
      description: Name of the user that requested the signing, for auditing purposes
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
    - name: binariesPath
      type: string
      description: The directory inside the workspace where the binaries are stored
      default: binaries
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: sign-base64-blob
      image:
        quay.io/konflux-ci/release-service-utils:3729a54989514da6a777579feabbd9b346c73551
      script: |
        #!/usr/bin/env bash
        set -ex
        set -o pipefail

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        default_pipeline_image="quay.io/redhat-isv/operator-pipelines-images:9ea90b42456fcdf66edf4b15c0c0487ba5fa3ee3"
        pipeline_image=$(jq -r --arg default_pipeline_image ${default_pipeline_image} \
            '.sign.pipelineImage // $default_pipeline_image' "${DATA_FILE}")
        config_map_name=$(jq -r '.sign.configMapName // "signing-config-map"' "${DATA_FILE}")
        pipelinerun_label="internal-services.appstudio.openshift.io/pipelinerun-uid"

        echo "Creating InternalRequest to sign blob:"
        echo "- blob=$(params.blob)"
        echo "- requester=$(params.requester)"

        IR_RESULT_FILE=$(mktemp)

        internal-request --pipeline "blob-signing-pipeline" \
            -p pipeline_image="${pipeline_image}" \
            -p blob="$(params.blob)" \
            -p requester="$(params.requester)" \
            -p config_map_name="${config_map_name}" \
            -p taskGitUrl="$(params.taskGitUrl)" \
            -p taskGitRevision="$(params.taskGitRevision)" \
            -t "$(params.requestTimeout)" \
            -l ${pipelinerun_label}="$(params.pipelineRunUid)" \
            | tee "$IR_RESULT_FILE" || exit 1

        internalRequest=$(awk 'NR==1{ print $2 }' "$IR_RESULT_FILE" | xargs)
        echo "done (${internalRequest})"

        payload=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results.signed_payload}')
        decoded_payload=$(echo -n "$payload" | base64 -d)

        # Build .sig file
        checksum_file_name=$(find "$(workspaces.data.path)/$(params.binariesPath)" -maxdepth 1 -name '*SHA256SUMS*' \
          -printf '%f\n')
        echo -n "$decoded_payload" \
        | gpg --dearmor \
        | tee "$(workspaces.data.path)/$(params.binariesPath)/${checksum_file_name}.sig"
