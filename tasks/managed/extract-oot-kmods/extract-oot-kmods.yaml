---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: extract-kmods-from-image
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to extract kernel modules from an image in a specific directory.
  params:
    - name: kmodsPath 
      type: string
      description: Path for the unsigned .ko files to be extracted from the image     
    - name: signedKmodsPath
      type: string
      description: Path to store the extracted file in the workspace 
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The git repository URL for task and StepAction resolution
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The git revision for task and StepAction resolution
      default: main
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: extract-kmods
      image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 250m 
      script: |
        #!/usr/bin/env bash
        set -ex
        export DOCKER_CONFIG
        
        # Debug: Show what dataDir we're using
        echo "DEBUG: dataDir parameter value: $(params.dataDir)"
        # Copy image to tmp
        KMODS_PATH=$(params.kmodsPath)
        SIGNED_KMODS_PATH=$(params.signedKmodsPath)
        snapshot_json=$(cat "$(params.dataDir)/$(params.snapshotPath)")
        source_image=$(jq -r '.components[0].containerImage' <<< "$snapshot_json")
        tmp_dir=$(mktemp -d)
        echo "Copying $source_image to $tmp_dir..."
        skopeo copy docker://"$source_image" dir:"$tmp_dir"
        echo "Inspecting layers to find OOT kernel modules and envfile"
        for LAYER in $(jq -r '.layers[].digest' "$tmp_dir/manifest.json"); do
            LAYER=${LAYER#sha256:}
            # Check if the archive contains the KMODS_PATH directory
            if tar -tf "$tmp_dir/$LAYER" | grep -q "^${KMODS_PATH#/}/"; then
                echo "Extracting $KMODS_PATH/ from $LAYER..."
                tar -xf "$tmp_dir/$LAYER" -C "$tmp_dir" "${KMODS_PATH#/}" --no-same-owner
                mkdir -p "$(params.dataDir)/$SIGNED_KMODS_PATH/"
                cp -r "$tmp_dir$KMODS_PATH"/*.ko "$(params.dataDir)/$SIGNED_KMODS_PATH/"
                echo "Copying envfile to get versions data..."
                # Also extract envfile if it exists in this layer
                if tar -tf "$tmp_dir/$LAYER" | grep -q "^envfile$"; then
                   tar -xf "$tmp_dir/$LAYER" -C "$tmp_dir" "envfile" --no-same-owner
                    cp "$tmp_dir/envfile" "$(params.dataDir)/$SIGNED_KMODS_PATH/"
                fi
            else
                echo "$KMODS_PATH not found in $LAYER so skipping layer..."
            fi
        done
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
