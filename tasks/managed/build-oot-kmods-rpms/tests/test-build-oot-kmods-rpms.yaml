---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-build-oot-kmods-rpms
spec:
  description: |
    Test the build-oot-kmods-rpms task
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:8353253caa411bfce2e121d75127693785348f51
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/signed-kmods/"

              # Create test environment file with driver information
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/signed-kmods/envfile" << EOF
              DRIVER_VENDOR=nvidia
              DRIVER_VERSION=555.42.02
              KERNEL_VERSION=6.5.0-1.el9.x86_64
              EOF

              # Create mock signed kernel module files
              echo -e "\x7fELF" > "$(params.dataDir)/$(context.pipelineRun.uid)/signed-kmods/nvidia.ko"
              echo -e "\x7fELF" > "$(params.dataDir)/$(context.pipelineRun.uid)/signed-kmods/nvidia-drm.ko"
              echo -e "\x7fELF" > "$(params.dataDir)/$(context.pipelineRun.uid)/signed-kmods/nvidia-modeset.ko"

              # Make them look like kernel modules (minimal binary header)
              for ko in "$(params.dataDir)/$(context.pipelineRun.uid)/signed-kmods/"*.ko; do
                printf "\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00" > "$ko"
                printf "nvidia kernel module test data" >> "$ko"
              done
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: build-oot-kmods-rpms
      params:
        - name: signedKmodsPath
          value: $(context.pipelineRun.uid)/signed-kmods
        - name: rpmOutputPath
          value: $(context.pipelineRun.uid)/rpms
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
          - name: pipelineRunUid
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:8353253caa411bfce2e121d75127693785348f51
            script: |
              #!/usr/bin/env bash
              set -eux

              RPM_OUTPUT_PATH="$(params.dataDir)/$(params.pipelineRunUid)/rpms"

              echo "Checking RPM output directory: ${RPM_OUTPUT_PATH}"

              # Check that RPMs were created
              if ! ls "${RPM_OUTPUT_PATH}"/*.rpm >/dev/null 2>&1; then
                echo "ERROR: No RPM files found in ${RPM_OUTPUT_PATH}"
                echo "Contents of RPM output directory:"
                ls -la "${RPM_OUTPUT_PATH}" || echo "Directory does not exist"
                exit 1
              fi

              echo "Found RPM files:"
              ls -la "${RPM_OUTPUT_PATH}"/*.rpm

              # Verify expected RPM naming pattern
              expected_rpm="${RPM_OUTPUT_PATH}/nvidia-kmods-555.42.02-1.6_5_0_1_el9_x86_64.x86_64.rpm"
              if [ ! -f "$expected_rpm" ]; then
                echo "ERROR: Expected RPM file not found: $expected_rpm"
                echo "Available RPM files:"
                ls -la "${RPM_OUTPUT_PATH}"/*.rpm
                exit 1
              fi

              echo "Found expected RPM: $expected_rpm"

              # Basic RPM validation - check if file is a valid RPM
              if ! rpm -qp --queryformat '%{NAME}-%{VERSION}-%{RELEASE}\n' "$expected_rpm" >/dev/null 2>&1; then
                echo "ERROR: Generated file is not a valid RPM"
                exit 1
              fi

              # Get RPM metadata
              rpm_name=$(rpm -qp --queryformat '%{NAME}' "$expected_rpm")
              rpm_version=$(rpm -qp --queryformat '%{VERSION}' "$expected_rpm")
              rpm_release=$(rpm -qp --queryformat '%{RELEASE}' "$expected_rpm")
              rpm_summary=$(rpm -qp --queryformat '%{SUMMARY}' "$expected_rpm")

              echo "RPM validation successful:"
              echo "  Name: $rpm_name"
              echo "  Version: $rpm_version"
              echo "  Release: $rpm_release"
              echo "  Summary: $rpm_summary"

              # Verify RPM metadata matches expected values
              if [ "$rpm_name" != "nvidia-kmods" ]; then
                echo "ERROR: RPM name mismatch. Expected: nvidia-kmods, Got: $rpm_name"
                exit 1
              fi

              if [ "$rpm_version" != "555.42.02" ]; then
                echo "ERROR: RPM version mismatch. Expected: 555.42.02, Got: $rpm_version"
                exit 1
              fi

              echo "All RPM metadata validation passed"

              # List RPM contents to verify kernel modules are included
              echo "RPM contents:"
              rpm -qlp "$expected_rpm"

              # Verify kernel modules are in the correct location
              if ! rpm -qlp "$expected_rpm" | grep -q "/lib/modules/6.5.0-1.el9.x86_64/extra/nvidia/.*\.ko$"; then
                echo "ERROR: Kernel modules not found in expected location within RPM"
                exit 1
              fi

              echo "Kernel modules found in correct RPM location"
              echo "build-oot-kmods-rpms test completed successfully"
      runAfter:
        - run-task
