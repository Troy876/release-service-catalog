---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-add-fbc-contribution-mixed-batching
spec:
  description: >
    Tests running the add-fbc-contribution with mixed batching criteria.
    Components 1, 2, & 3 should batch together (same fromIndex, targetIndex, ocpVersion).
    Component 4 should be separate (different ocpVersion).
    Should create 2 total InternalRequests.
    buildTags and addArches are global parameters, not batching criteria.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot_spec.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp0",
                    "containerImage": "registry.io/image0@sha256:0000",
                    "repository": "prod-registry.io/prod-location0",
                    "updatedFromIndex": "quay.io/scoheb/fbc-index-testing:latest",
                    "updatedTargetIndex": "quay.io/scoheb/fbc-target-index-testing:v4.12",
                    "ocpVersion": "v4.12"
                  },
                  {
                    "name": "comp1",
                    "containerImage": "registry.io/image1@sha256:0000",
                    "repository": "prod-registry.io/prod-location1",
                    "updatedFromIndex": "quay.io/scoheb/fbc-index-testing:latest",
                    "updatedTargetIndex": "quay.io/scoheb/fbc-target-index-testing:v4.12",
                    "ocpVersion": "v4.12"
                  },
                  {
                    "name": "comp2",
                    "containerImage": "registry.io/image2@sha256:0000",
                    "repository": "prod-registry.io/prod-location2",
                    "updatedFromIndex": "quay.io/scoheb/fbc-index-testing:latest",
                    "updatedTargetIndex": "quay.io/scoheb/fbc-target-index-testing:v4.12",
                    "ocpVersion": "v4.12"
                  },
                  {
                    "name": "comp3",
                    "containerImage": "registry.io/image3@sha256:0000",
                    "repository": "prod-registry.io/prod-location3",
                    "updatedFromIndex": "quay.io/scoheb/fbc-index-testing:latest",
                    "updatedTargetIndex": "quay.io/scoheb/fbc-target-index-testing:v4.13",
                    "ocpVersion": "v4.13"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "fbc": {
                  "fbcPublishingCredentials": "test-fbc-publishing-credentials",
                  "buildTimeoutSeconds": 420,
                  "requestTimeoutSeconds": 120,
                  "buildTags": ["tag1", "tag2"],
                  "addArches": ["amd64", "arm64"]
                }
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: add-fbc-contribution
      params:
        - name: fromIndex
          value: "quay.io/scoheb/fbc-index-testing:latest"
        - name: targetIndex
          value: "quay.io/scoheb/fbc-target-index-testing:v4.12"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot_spec.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: isFbcOptIn
          value: $(tasks.run-task.results.isFbcOptIn)
        - name: mustPublishIndexImage
          value: $(tasks.run-task.results.mustPublishIndexImage)
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: internalRequestResultsFile
          value: $(tasks.run-task.results.internalRequestResultsFile)
        - name: indexImageDigests
          value: $(tasks.run-task.results.indexImageDigests)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: isFbcOptIn
            type: string
          - name: mustPublishIndexImage
            type: string
          - name: pipelineRunUid
            type: string
          - name: internalRequestResultsFile
            type: string
          - name: indexImageDigests
            type: string
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              #
              set -eux

              RESULTS_FILE="$(params.dataDir)/$(params.internalRequestResultsFile)"
              internalRequests="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers \
                | xargs)"

              # Mixed batching should create exactly 2 InternalRequests
              # Batch 1: comp0 + comp1 + comp2 (same fromIndex, targetIndex, ocpVersion v4.12)
              # Batch 2: comp3 (different ocpVersion v4.13)
              num_requests=$(wc -w <<< "$internalRequests")
              if [ "$num_requests" -ne 2 ]; then
                echo "Expected 2 InternalRequests with mixed batching, but got $num_requests"
                exit 1
              fi

              # Create array of requests sorted by creation time
              read -ra requests_array <<< "$internalRequests"

              # Check first request - should contain comp0, comp1, and comp2 batched together (v4.12)
              request1="${requests_array[0]}"
              params1=$(kubectl get internalrequest "$request1" -o jsonpath="{.spec.params}")
              
              fromIndex="quay.io/scoheb/fbc-index-testing:latest"
              if [ "$(jq -r '.fromIndex' <<< "$params1")" != "$fromIndex" ]; then
                echo "fromIndex does not match for batch 1"
                exit 1
              fi

              # Check fbcFragments for first batch (should contain 3 fragments)
              fragments1=$(jq -r '.fbcFragments' <<< "$params1" | jq -c .)
              expected_batch1='["registry.io/image0@sha256:0000","registry.io/image1@sha256:0000","registry.io/image2@sha256:0000"]'
              sorted_actual1=$(jq -c -S '.' <<< "$fragments1")
              sorted_expected1=$(jq -c -S '.' <<< "$expected_batch1")
              
              if [ "$sorted_actual1" != "$sorted_expected1" ]; then
                echo "fbcFragments for batch 1 do not match. Expected: $sorted_expected1, Got: $sorted_actual1"
                exit 1
              fi

              # Check second request - should contain only comp3 (v4.13)
              request2="${requests_array[1]}"
              params2=$(kubectl get internalrequest "$request2" -o jsonpath="{.spec.params}")
              
              fragments2=$(jq -r '.fbcFragments' <<< "$params2" | jq -c .)
              expected_batch2='["registry.io/image3@sha256:0000"]'
              
              if [ "$(jq -c -S '.' <<< "$fragments2")" != "$(jq -c -S '.' <<< "$expected_batch2")" ]; then
                echo "fbcFragments for batch 2 do not match. Expected: $expected_batch2, Got: $fragments2"
                exit 1
              fi

              # Verify common parameters for all requests
              for request in "${requests_array[@]}"; do
                params=$(kubectl get internalrequest "$request" -o jsonpath="{.spec.params}")
                
                if [ "$(jq -r '.buildTimeoutSeconds' <<< "$params")" != "420" ]; then
                  echo "buildTimeoutSeconds does not match for request $request"
                  exit 1
                fi

                if [ "$(jq -r '.taskGitUrl' <<< "$params")" != "http://localhost" ]; then
                  echo "taskGitUrl does not match for request $request"
                  exit 1
                fi

                if [ "$(jq -r '.taskGitRevision' <<< "$params")" != "main" ]; then
                  echo "taskGitRevision does not match for request $request"
                  exit 1
                fi
              done

              # Verify pipeline results
              if [ "$(params.mustPublishIndexImage)" != "false" ]; then
                echo "Unexpected value for mustPublishIndexImage: $(params.mustPublishIndexImage)"
                exit 1
              fi

              if [ "$(params.isFbcOptIn)" != "true" ]; then
                echo "Unexpected value for fbc_opt_in: $(params.isFbcOptIn)"
                exit 1
              fi

              # Verify results file has correct number of components
              num_components=$(jq -r '.components | length' "$RESULTS_FILE")
              if [ "$num_components" -ne 4 ]; then
                echo "Expected 4 components in results file, but got $num_components"
                exit 1
              fi

              # Verify that global buildTags and addArches are used for both batches
              for request in "${requests_array[@]}"; do
                params=$(kubectl get internalrequest "$request" -o jsonpath="{.spec.params}")
                
                # Check global buildTags
                buildTags=$(jq -r '.buildTags' <<< "$params" | jq -c .)
                expected_build_tags='["tag1","tag2"]'
                if [ "$(jq -c -S '.' <<< "$buildTags")" != "$(jq -c -S '.' <<< "$expected_build_tags")" ]; then
                  echo "buildTags do not match for request $request. Expected: $expected_build_tags, Got: $buildTags"
                  exit 1
                fi
                
                # Check global addArches
                addArches=$(jq -r '.addArches' <<< "$params" | jq -c .)
                expected_add_arches='["amd64","arm64"]'
                if [ "$(jq -c -S '.' <<< "$addArches")" != "$(jq -c -S '.' <<< "$expected_add_arches")" ]; then
                  echo "addArches do not match for request $request. Expected: $expected_add_arches, Got: $addArches"
                  exit 1
                fi
              done

              echo "Mixed batching test passed successfully!"
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env sh
              set -eux
              
              kubectl delete internalrequests --all