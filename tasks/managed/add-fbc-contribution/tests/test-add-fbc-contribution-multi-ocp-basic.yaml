---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-add-fbc-contribution-multi-ocp-basic
  annotations:
    test/assert-task-failure: "add-contribution"
spec:
  description: Test that multi-OCP functionality correctly validates for snapshot
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-test-data
            image: quay.io/konflux-ci/release-service-utils:9c82b0f13e40e76150835b628c86ce05ae95a366
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"

              # Create legacy snapshot (for backward compatibility)
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot-spec.json" << EOF
              {
                "application": "multi-ocp-validation-test",
                "components": [
                  {
                    "name": "test-component",
                    "containerImage": "quay.io/test/comp@sha256:abc123",
                    "repository": "quay.io/test/repo"
                  }
                ]
              }
              EOF

              # Create data.json
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "fbc": {
                  "fbcPublishingCredentials": "test-fbc-publishing-credentials",
                  "buildTimeoutSeconds": 420,
                  "requestTimeoutSeconds": 120,
                  "fromIndex": "quay.io/test/from-index:latest",
                  "targetIndex": "quay.io/test/target-index:latest"
                }
              }
              EOF

              # Note: We intentionally do NOT create snapshot_spec.json
              # This will trigger the snapshot validation error
              echo "Test setup complete - snapshot intentionally omitted to test validation"
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)

    - name: add-contribution
      taskRef:
        name: add-fbc-contribution
      params:
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot-spec.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
        - name: mustPublishIndexImage
          value: "true"
        - name: mustOverwriteFromIndexImage
          value: "true"
        - name: iibServiceAccountSecret
          value: "test-iib-secret"
      runAfter:
        - setup

  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:9c82b0f13e40e76150835b628c86ce05ae95a366
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests -l \
                "internal-services.appstudio.openshift.io/pipelinerun-uid=$(context.pipelineRun.uid)" || true

              echo "Multi-OCP validation test cleanup completed"
