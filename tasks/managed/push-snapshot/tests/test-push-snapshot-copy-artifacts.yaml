---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-snapshot-copy-artifacts
spec:
  description: |
    Run the push-snapshot task with copyAttachedArtifacts enabled to test artifact copying functionality.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp1",
                    "containerImage": "reg.io/test@sha256:abcdefg",
                    "repository": "registry.com/repository",
                    "tags": [ "tag1", "tag2" ]
                  },
                  {
                    "name": "comp2",
                    "containerImage": "reg.io/test@sha256:hijklmn",
                    "repository": "registry.com/repository",
                    "tags": [ "tag3" ]
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "mapping": {
                  "defaults": {
                    "pushSourceContainer": false
                  },
                  "components": [
                    {
                      "name": "comp1",
                      "repository": "registry.com/repository"
                    },
                    {
                      "name": "comp2",
                      "repository": "registry.com/repository"
                    }
                  ]
                }
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-snapshot
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: retries
          value: "0"
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
        - name: copyAttachedArtifacts
          value: "true"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: ociStorage
          value: $(params.ociStorage)
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
          - name: ociStorage
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check
            image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
            script: |
              #!/usr/bin/env bash
              set -eu
              # Verify oras discover was called on both source images
              grep 'discover --registry-config .* reg.io/test@sha256:abcdefg --format json' \
                "$(params.dataDir)/mock_oras.txt"
              grep 'discover --registry-config .* reg.io/test@sha256:hijklmn --format json' \
                "$(params.dataDir)/mock_oras.txt"
              # Since mock returns 1 artifact for sha256:abcdefg, task should use oras cp -r for its tags
              grep -E \
                'cp -r( --from-registry-config [^ ]+ --to-registry-config [^ ]+)?' \
                "$(params.dataDir)/mock_oras.txt" | \
              grep -E 'reg.io/test@sha256:abcdefg'
              # For hijklmn (no artifacts), it should fall back to cosign copy
              # Count cosign copy calls (tag1, tag2, tag3)
              COPIES=$(grep -c \
                '^copy -f reg.io/test@sha256:abcdefg registry.com/repository:tag[12]$' \
                "$(params.dataDir)/mock_cosign.txt" || true)
              COPIES2=$(grep -c \
                '^copy -f reg.io/test@sha256:hijklmn registry.com/repository:tag3$' \
                "$(params.dataDir)/mock_cosign.txt" || true)
              TOTAL=$((COPIES + COPIES2))
              # We expect 1 cosign copy (tag3) and 0 for tag1/tag2 (handled by oras cp -r)
              test "$TOTAL" -eq 1 || {
                echo "Unexpected cosign copies: $TOTAL (expected 1 for tag3 only)"
                cat "$(params.dataDir)/mock_cosign.txt"
                exit 1
              }
      runAfter:
        - run-task
