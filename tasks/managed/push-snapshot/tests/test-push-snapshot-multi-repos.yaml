---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-snapshot-multi-repos
spec:
  description: |
    Run the push-snapshot task with a component that has multiple repositories.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:1d0f44656336b012945d5f4af5e289b0dfe176ba
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp1",
                    "containerImage": "registry.io/image1:tag1",
                    "repositories": [
                      {
                        "url": "prod-registry.io/prod-location1",
                        "tags": [
                          "tag1-12345",
                          "tag2-zyxw"
                        ]
                      },
                      {
                        "url": "backup-registry.io/backup-location1",
                        "tags": [
                          "backup-tag1",
                          "backup-tag2"
                        ]
                      }
                    ],
                    "pushSourceContainer": false
                  },
                  {
                    "name": "comp2",
                    "containerImage": "registry.io/image2:tag2",
                    "repositories": [
                      {
                        "url": "prod-registry.io/prod-location2",
                        "tags": [
                          "some-cool-tag"
                        ]
                      },
                      {
                        "url": "mirror-registry.io/mirror-location2",
                        "tags": [
                          "mirror-tag"
                        ]
                      },
                      {
                        "url": "dev-registry.io/dev-location2",
                        "tags": [
                          "dev-tag1",
                          "dev-tag2",
                          "dev-tag3"
                        ]
                      }
                    ]
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "mapping": {
                  "defaults": {
                    "pushSourceContainer": true
                  }
                }
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-snapshot
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: retries
          value: 0
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:1d0f44656336b012945d5f4af5e289b0dfe176ba
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < "$(params.dataDir)/mock_cosign.txt")" != 17 ]; then
                echo Error: cosign was expected to be called 17 times. Actual calls:
                cat "$(params.dataDir)/mock_cosign.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/mock_skopeo.txt")" != 2 ]; then
                echo Error: skopeo was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)/mock_skopeo.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/mock_oras.txt")" -lt 7 ]; then
                echo Error: oras was expected to be called at least 7 times. Actual calls:
                cat "$(params.dataDir)/mock_oras.txt"
                exit 1
              fi

              test "$(jq -r '.images[0].name' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")" == "comp1"

              test "$(jq -r '.images[0].shasum' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")" == \
                "sha256:6ff029b0b6cf82e3df2a2360dc88cd527c51132b557207d64634d9c245e0d15e"

              test "$(jq -r '.images[0].urls | length' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")" \
                == "4"
              test "$(jq -r '.images[0].arches | length' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")" \
                == "2"

              test "$(jq -r '.images[1].name' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")" == "comp2"

              test "$(jq -r '.images[1].urls | length' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")" \
                == "11"
              test "$(jq -r '.images[1].arches | length' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")" \
                == "2"

              # Verify specific URLs are present
              urls_comp1=$(jq -r '.images[0].urls[]' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")
              echo "$urls_comp1" | grep -q "prod-registry.io/prod-location1:tag1-12345"
              echo "$urls_comp1" | grep -q "prod-registry.io/prod-location1:tag2-zyxw"
              echo "$urls_comp1" | grep -q "backup-registry.io/backup-location1:backup-tag1"
              echo "$urls_comp1" | grep -q "backup-registry.io/backup-location1:backup-tag2"

              urls_comp2=$(jq -r '.images[1].urls[]' \
                "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-snapshot-results.json")
              echo "$urls_comp2" | grep -q "prod-registry.io/prod-location2:some-cool-tag"
              echo "$urls_comp2" | grep -q "mirror-registry.io/mirror-location2:mirror-tag"
              echo "$urls_comp2" | grep -q "dev-registry.io/dev-location2:dev-tag1"
              echo "$urls_comp2" | grep -q "dev-registry.io/dev-location2:dev-tag2"
              echo "$urls_comp2" | grep -q "dev-registry.io/dev-location2:dev-tag3"
      runAfter:
        - run-task
