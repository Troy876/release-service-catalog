---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-prepare-fbc-snapshot
spec:
  description: Test prepare-fbc-snapshot task snapshot updating functionality
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
    - name: sourceDataArtifact
      description: Location of trusted artifacts to be used to populate data directory
      type: string
      default: ""
  tasks:
    - name: setup
      params:
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
        - name: dataDir
          value: $(params.dataDir)
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
            description: Location of trusted artifacts to be used to populate data directory
          - name: dataDir
            type: string
            description: The location where data will be stored
          - name: snapshotPath
            type: string
            description: Path to the JSON string of the mapped Snapshot spec in the data workspace
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-test-data
            image: quay.io/konflux-ci/release-service-utils:9c82b0f13e40e76150835b628c86ce05ae95a366
            script: |
              #!/usr/bin/env bash
              set -eux

              # Ensure data directory exists
              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"

              # Create snapshot with FBC components
              cat > "$(params.dataDir)/$(params.snapshotPath)" << 'EOF'
              {
                "components": [
                  {
                    "name": "test-fbc-component",
                    "containerImage": "quay.io/hacbs-release-tests/test-ocp-version/test-fbc-component@sha256:f6e744662e342c1321deddb92469b55197002717a15f8c0b1bb2d9440aac2297",
                    "repository": "quay.io/test/test-fbc-component"
                  }
                ]
              }
              EOF

              # Create FBC data configuration
              cat > "$(params.dataDir)/data.json" << 'EOF'
              {
                "fbc": {
                  "fromIndex": "quay.io/redhat/redhat-operator-index:{{ OCP_VERSION }}",
                  "targetIndex": "quay.io/test/target-index:{{ OCP_VERSION }}",
                  "hotfix": false,
                  "preGA": false,
                  "stagedIndex": false
                }
              }
              EOF

              echo "Test data created"
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)

    - name: run-task
      taskRef:
        name: prepare-fbc-snapshot
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
        - name: dataPath
          value: data.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog.git"
        - name: taskGitRevision
          value: "development"
      runAfter:
        - setup

    - name: verify-snapshot-update
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
            description: Location of trusted artifacts to be used to populate data directory
          - name: dataDir
            type: string
            description: The location where data will be stored
          - name: snapshotPath
            type: string
            description: Path to the JSON string of the mapped Snapshot spec in the data workspace
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
              - name: orasOptions
                value: $(params.orasOptions)
          - name: verify-snapshot
            image: quay.io/konflux-ci/release-service-utils:9c82b0f13e40e76150835b628c86ce05ae95a366
            script: |
              #!/usr/bin/env bash
              set -eux

              echo "=== SNAPSHOT UPDATE VERIFICATION ==="

              SNAPSHOT_PATH="$(params.dataDir)/$(params.snapshotPath)"
              # Verify snapshot contains expected multi-OCP structure
              echo "Updated snapshot contents:"
              jq . "$SNAPSHOT_PATH"

              # Check that components have OCP version information
              COMPONENTS_WITH_OCP=$(jq '[.components[] | select(has("ocpVersion"))] | length' "$SNAPSHOT_PATH")
              TOTAL_COMPONENTS=$(jq '.components | length' "$SNAPSHOT_PATH")

              echo "Total components: $TOTAL_COMPONENTS"
              echo "Components with OCP version: $COMPONENTS_WITH_OCP"

              if [[ "$COMPONENTS_WITH_OCP" -eq "$TOTAL_COMPONENTS" ]] && [[ "$TOTAL_COMPONENTS" -gt 0 ]]; then
                echo "✅ All components have OCP version information"
              else
                echo "❌ Not all components have OCP version information"
                exit 1
              fi

              # Check for component-specific index resolution
              COMPONENTS_WITH_FROM_INDEX=$(jq \
                '[.components[] | select(has("updatedFromIndex"))] | length' "$SNAPSHOT_PATH")
              COMPONENTS_WITH_TARGET_INDEX=$(jq \
                '[.components[] | select(has("targetIndex"))] | length' "$SNAPSHOT_PATH")

              echo "Components with updatedFromIndex: $COMPONENTS_WITH_FROM_INDEX"
              echo "Components with targetIndex: $COMPONENTS_WITH_TARGET_INDEX"

              if [[ "$COMPONENTS_WITH_FROM_INDEX" -eq "$TOTAL_COMPONENTS" ]] && \
                 [[ "$COMPONENTS_WITH_TARGET_INDEX" -eq "$TOTAL_COMPONENTS" ]]; then
                echo "✅ All components have resolved indexes"
              else
                echo "❌ Not all components have resolved indexes"
                exit 1
              fi

              # Verify OCP version replacement in indexes
              echo "Verifying OCP version replacement..."
              for i in $(seq 0 $((TOTAL_COMPONENTS - 1))); do
                OCP_VERSION=$(jq -r ".components[$i].ocpVersion" "$SNAPSHOT_PATH")
                FROM_INDEX=$(jq -r ".components[$i].updatedFromIndex" "$SNAPSHOT_PATH")
                TARGET_INDEX=$(jq -r ".components[$i].targetIndex" "$SNAPSHOT_PATH")

                echo "Component $i: OCP=$OCP_VERSION, fromIndex=$FROM_INDEX, targetIndex=$TARGET_INDEX"

                # Check that OCP version is present in the resolved indexes
                if [[ "$FROM_INDEX" == *"$OCP_VERSION"* ]] && [[ "$TARGET_INDEX" == *"$OCP_VERSION"* ]]; then
                  echo "✅ Component $i has correct OCP version in indexes"
                else
                  echo "❌ Component $i missing OCP version in indexes"
                  exit 1
                fi
              done

              echo "✅ All snapshot update verifications passed"
      runAfter:
        - run-task
