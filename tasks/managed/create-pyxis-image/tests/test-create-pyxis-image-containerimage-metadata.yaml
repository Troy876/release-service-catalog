---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-pyxis-image-containerimage-metadata.yaml
spec:
  description: |
    Run the create-pyxis-image task with two components in the snapshot
    and metadata. This includes the labels and env_variables of the container image.
    This test will verify that the metadata is passed to the create_container_image task.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:4579b8d372e034d788129fa16185c1278faecd09
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)"/mapped_snapshot.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp1",
                    "containerImage": "source1@sha256:mydigest1",
                    "metadata": {
                      "labels": [
                        {
                          "name": "testlabel1",
                          "value": "mydigest1"
                        }
                      ],
                      "env_variables": [
                        "testenv1=mydigest1"
                      ]
                    },
                    "repositories": [
                      {
                        "url": "registry.io/another-image1",
                        "tags": [
                          "testtag1"
                        ]
                      }
                    ]
                  },
                  {
                    "name": "comp2",
                    "containerImage": "source2@sha256:mydigest2",
                    "metadata": {
                      "labels": [
                        {
                          "name": "testlabel2",
                          "value": "mydigest2"
                        }
                      ],
                      "env_variables": [
                        "testenv2=mydigest2"
                      ]
                    },
                    "repositories": [
                      {
                        "url": "registry.io/another-image2",
                        "tags": [
                          "testtag2"
                        ]
                      }
                    ]
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/mydata.json" << EOF
              {
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: create-pyxis-image
      params:
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
        - name: server
          value: stage
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/mapped_snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/mydata.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: pyxisDataPath
          value: $(tasks.run-task.results.pyxisDataPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: pyxisDataPath
            type: string
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:4579b8d372e034d788129fa16185c1278faecd09
            script: |
              #!/usr/bin/env bash
              set -eux
            
              metadata_mock="$(params.dataDir)/mock_metadata_output.json"
              
              echo "Test that there are 2 metadata objects"
              test "$(jq -s 'length' "$metadata_mock")" -eq 2
              
              echo "Test that testlabel1 with value mydigest1 is present"
              test "$(jq -s 'any(.[].labels[]; .name == "testlabel1" and .value == "mydigest1")' \
                "$metadata_mock")" = "true"
              
              echo "Test that testlabel2 with value mydigest2 is present"
              test "$(jq -s 'any(.[].labels[]; .name == "testlabel2" and .value == "mydigest2")' \
                "$metadata_mock")" = "true"
              
              echo "Test that testenv1=mydigest1 is present"
              test "$(jq -s 'any(.[].env_variables[]; . == "testenv1=mydigest1")' "$metadata_mock")" = "true"
              
              echo "Test that testenv2=mydigest2 is present"
              test "$(jq -s 'any(.[].env_variables[]; . == "testenv2=mydigest2")' "$metadata_mock")" = "true"
              
      runAfter:
        - run-task
