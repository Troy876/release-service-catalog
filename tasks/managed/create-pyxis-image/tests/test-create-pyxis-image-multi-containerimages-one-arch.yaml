---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-pyxis-image-multi-containerimages-one-arch
spec:
  description: |
    Run the create-pyxis-image task with multiple containerImages in the snapshot
    and a single arch.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)"/mapped_snapshot.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp1",
                    "containerImage": "source1@sha256:mydigest1",
                    "repositories": [
                      {
                        "url": "registry.io/image1a",
                        "tags": [
                          "testtag1"
                        ]
                      },
                      {
                        "url": "registry.io/image1b",
                        "tags": [
                          "testtag1b1",
                          "testtag1b2"
                        ]
                      },
                      {
                        "url": "registry.io/image1c",
                        "tags": [
                          "testtag1c"
                        ]
                      }
                    ]
                  },
                  {
                    "name": "comp2",
                    "containerImage": "source2@sha256:mydigest2",
                    "repositories": [
                      {
                        "url": "registry.io/image2",
                        "tags": [
                          "testtag2"
                        ]
                      }
                    ]
                  },
                  {
                    "name": "comp3",
                    "containerImage": "source3@sha256:mydigest3",
                    "repositories": [
                      {
                        "url": "registry.io/image3",
                        "tags": [
                          "testtag3"
                        ]
                      }
                    ]
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/mydata.json" << EOF
              {
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: create-pyxis-image
      params:
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
        - name: server
          value: stage
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/mapped_snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/mydata.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: pyxisDataPath
          value: $(tasks.run-task.results.pyxisDataPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: pyxisDataPath
            type: string
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < \
                "$(params.dataDir)/mock_create_container_image.txt")" != 5 ]; then
                echo Error: create_container_image was expected to be called 5 times. Actual calls:
                cat "$(params.dataDir)/mock_create_container_image.txt"
                exit 1
              fi

              if [ -f "$(params.dataDir)/mock_cleanup_tags.txt" ]; then
                echo Error: cleanup_tags was not expected to be called. Actual calls:
                cat "$(params.dataDir)/mock_cleanup_tags.txt"
                exit 1
              fi

              cat > "$(params.dataDir)/skopeo_expected_calls.txt" << EOF
              inspect --retry-times 3 --raw docker://registry.io/image1a@sha256:mydigest1
              inspect --retry-times 3 --raw docker://registry.io/image1b@sha256:mydigest1
              inspect --retry-times 3 --raw docker://registry.io/image1c@sha256:mydigest1
              inspect --retry-times 3 --raw docker://registry.io/image2@sha256:mydigest2
              inspect --retry-times 3 --raw docker://registry.io/image3@sha256:mydigest3
              EOF

              mock_skopeo_calls="$(sort < "$(params.dataDir)/mock_skopeo.txt" | md5sum)"
              # check that the actual calls match the expected calls
              if [ "$(md5sum < "$(params.dataDir)/skopeo_expected_calls.txt")" \
                != "${mock_skopeo_calls}" ]
              then
                echo "Error: Actual skopeo calls do not match expected calls."
                echo Expected calls:
                cat "$(params.dataDir)/skopeo_expected_calls.txt"
                echo Actual calls:
                echo "${mock_skopeo_calls}"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/mock_oras.txt")" != 8 ]; then
                echo Error: oras was expected to be called 8 times. Actual calls:
                cat "$(params.dataDir)/mock_oras.txt"
                exit 1
              fi

              amdCount=$(jq '[.components[].pyxisImages[] | select(.arch == "amd64")] | length' \
                "$(params.dataDir)/$(params.pyxisDataPath)")
              if [ "$amdCount" != 3 ]; then
                echo "Error: amd64 images were expected to be 3. Actual count: $amdCount"
                exit 1
              fi

              osCount=$(jq '[.components[].pyxisImages[]] | all(.os == "linux")' \
                "$(params.dataDir)/$(params.pyxisDataPath)")
              if [ "$osCount" != "true" ]; then
                echo "Error: all images were expected to be linux."
                echo "osCount: $osCount"
                exit 1
              fi

      runAfter:
        - run-task
