---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-collect-data-tags
spec:
  description: |
    Run the collect-data task and verify the default tags in Release/ReleasePlan/ReleasePlanAdmission are merged.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: create-crs
            image: quay.io/konflux-ci/release-service-utils:8353253caa411bfce2e121d75127693785348f51
            script: |
              #!/usr/bin/env bash
              set -eux

              cat > release << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Release
              metadata:
                name: release-sample
                namespace: default
              spec:
                snapshot: foo
                releasePlan: foo
                data:
                  mapping:
                    defaults:
                      tags:
                        - latest-{{ timestamp }}
              EOF
              kubectl apply -f release

              cat > releaseplan << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: ReleasePlan
              metadata:
                name: releaseplan-sample
                namespace: default
              spec:
                application: foo
                target: foo
                data:
                  mapping:
                    defaults:
                      tags:
                        - latest
              EOF
              kubectl apply -f releaseplan

              cat > releaseplanadmission << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: ReleasePlanAdmission
              metadata:
                name: releaseplanadmission-sample
                namespace: default
              spec:
                applications:
                  - foo
                origin: foo
                data:
                  mapping:
                    defaults:
                      tags:
                        - v2.9.0
                        - '{{ release_timestamp }}'
                    components:
                      - component: 'testcomp'
                        repository: quay.io/redhat-appstudio-qe/dcmetromap
                policy: foo
                pipeline:
                  pipelineRef:
                    resolver: cluster
                    params:
                      - name: name
                        value: release-pipeline
                      - name: namespace
                        value: default
                      - name: kind
                        value: pipeline
              EOF
              kubectl apply -f releaseplanadmission

              cat > releaseserviceconfig << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: ReleaseServiceConfig
              metadata:
                name: releaseserviceconfig-sample
                namespace: default
              spec:
              EOF
              kubectl apply -f releaseserviceconfig

              cat > snapshot << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Snapshot
              metadata:
                name: snapshot-sample
                namespace: default
              spec:
                application: foo
                components:
                  - name: testcomp
                    containerImage: newimage
              EOF
              kubectl apply -f snapshot
    - name: run-task
      taskRef:
        name: collect-data
      params:
        - name: release
          value: default/release-sample
        - name: releasePlan
          value: default/releaseplan-sample
        - name: releasePlanAdmission
          value: default/releaseplanadmission-sample
        - name: releaseServiceConfig
          value: default/releaseserviceconfig-sample
        - name: snapshot
          value: default/snapshot-sample
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: resultsDir
          value: $(tasks.run-task.results.resultsDir)
        - name: release
          value: $(tasks.run-task.results.release)
        - name: releasePlan
          value: $(tasks.run-task.results.releasePlan)
        - name: releasePlanAdmission
          value: $(tasks.run-task.results.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(tasks.run-task.results.releaseServiceConfig)
        - name: snapshotSpec
          value: $(tasks.run-task.results.snapshotSpec)
        - name: singleComponentMode
          value: $(tasks.run-task.results.singleComponentMode)
        - name: snapshotName
          value: $(tasks.run-task.results.snapshotName)
        - name: snapshotNamespace
          value: $(tasks.run-task.results.snapshotNamespace)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: subdirectory
          value: $(tasks.run-task.results.subdirectory)
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: resultsDir
            type: string
          - name: release
            type: string
          - name: releasePlan
            type: string
          - name: releasePlanAdmission
            type: string
          - name: releaseServiceConfig
            type: string
          - name: snapshotSpec
            type: string
          - name: singleComponentMode
            type: string
          - name: snapshotName
            type: string
          - name: snapshotNamespace
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:8353253caa411bfce2e121d75127693785348f51
            script: |
              #!/usr/bin/env bash
              set -eux

              echo Test that the default tags in Release, ReleasePlan, ReleasePlanAdmission merged
              v="$(jq -c '.mapping.defaults.tags' < "$(params.dataDir)/$(params.subdirectory)/data.json")"
              test "$v" == '["latest","latest-{{ timestamp }}","v2.9.0","{{ release_timestamp }}"]'

  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:8353253caa411bfce2e121d75127693785348f51
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete release release-sample
              kubectl delete releaseplan releaseplan-sample
              kubectl delete releaseplanadmission releaseplanadmission-sample
              kubectl delete releaseserviceconfig releaseserviceconfig-sample
              kubectl delete snapshot snapshot-sample
