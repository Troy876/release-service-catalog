---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-advisory-marketplace-skip-purl
spec:
  description: |
    Assert that the update-purl step is skipped for marketplace releases
    when cloudMarketplacesSecret is present in the data.json file.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          securityContext:
            runAsUser: 1001
        steps:
          - name: create-crs
            image: quay.io/konflux-ci/release-service-utils:cee1fd0191e750b0736d8197701d91ce2f308e03
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_release_plan_admission.json" << 'EOF'
              {
                "apiVersion": "appstudio.redhat.com/v1alpha1",
                "kind": "ReleasePlanAdmission",
                "metadata": {
                  "name": "disk-images-azure-marketplace-amd-prod-1-5",
                  "namespace": "rhtap-releng-tenant"
                },
                "spec": {
                  "applications": ["amd-azure-disk-image-1-5"],
                  "policy": "registry-rhel-ai-disk-images-prod",
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "https://github.com/konflux-ci/release-service-catalog.git"
                        },
                        {
                          "name": "revision",
                          "value": "production"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipelines/managed/push-disk-images-to-marketplaces/push-disk-images-to-marketplaces.yaml"
                        }
                      ]
                    }
                  },
                  "serviceAccountName": "release-stratosphere",
                  "origin": "rhel-ai-tenant"
                }
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json" << 'EOF'
              {
                "application": "rhel-ai-app",
                "components": [
                  {
                    "name": "amd-azure-disk-image-1-5",
                    "repository": "quay.io/redhat-prod/rhel-ai----disk-image"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << 'EOF'
              {
                "mapping": {
                  "components": [
                    {
                      "name": "amd-azure-disk-image-1-5",
                      "contentType": "disk-image",
                      "staged": {
                        "destination": "rhelai-1_DOT_5-for-rhel-9-x86_64-isos",
                        "version": "1.5",
                        "files": [
                          {
                            "filename": "rhel-ai-amd-azure-1.5-20250101-x86_64.vhd.gz",
                            "source": "disk.vhd.gz"
                          }
                        ]
                      },
                      "productInfo": {
                        "filePrefix": "rhel-ai-amd-azure-1.5",
                        "productCode": "RHELAI",
                        "productName": "RHEL AI",
                        "productVersionName": "1.5"
                      },
                      "starmap": [
                        {
                          "cloud": "azure",
                          "mappings": {
                            "azure-emea": {
                              "destinations": [
                                {
                                  "architecture": null,
                                  "destination": "rh-rhel-ai/rh-rhelai-amd-1gpu",
                                  "overwrite": false,
                                  "restrict_version": false,
                                  "vhd_check_base_sas_only": false
                                }
                              ],
                              "provider": null
                            }
                          },
                          "meta": {"generation": "V2", "support_legacy": true},
                          "name": "rhel-ai-amd-azure",
                          "workflow": "stratosphere"
                        }
                      ]
                    }
                  ],
                  "cloudMarketplacesSecret": "azure-stratosphere-secret",
                  "cloudMarketplacesPrePush": false
                },
                "releaseNotes": {
                  "product_name": "Red Hat Enterprise Linux AI",
                  "product_version": "1.5",
                  "product_id": [932],
                  "cpe": "cpe:/a:redhat:enterprise_linux_ai:1.5",
                  "type": "RHBA",
                  "synopsis": "RHEL AI 1.5 Azure Marketplace Release",
                  "topic": "RHEL AI 1.5 Azure Marketplace disk images",
                  "description": "This release provides RHEL AI 1.5 disk images for Azure Marketplace",
                  "solution": "Deploy using Azure Marketplace",
                  "references": [],
                  "content": {
                    "artifacts": [
                      {
                        "architecture": "x86_64",
                        "os": "linux",
                        "purl": "pkg:generic/amd-azure-disk-image-1-5@1.5",
                        "component": "amd-azure-disk-image-1-5"
                      }
                    ]
                  }
                },
                "sign": {
                  "configMapName": "cm"
                }
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: create-advisory
      params:
        - name: releasePlanAdmissionPath
          value: "$(context.pipelineRun.uid)/test_release_plan_admission.json"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/test_snapshot_spec.json"
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: environment
          value: stage
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: synchronously
          value: "false"
        - name: request
          value: "test-request"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: "$(params.dataDir)"
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          securityContext:
            runAsUser: 1001
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:cee1fd0191e750b0736d8197701d91ce2f308e03
            script: |
              #!/usr/bin/env bash
              set -eux

              DATA_FILE="$(params.dataDir)/$(context.pipelineRun.uid)/data.json"

              # Verify that cloudMarketplacesSecret is present (this is what triggers the skip)
              MARKETPLACE_SECRET=$(jq -r '.mapping.cloudMarketplacesSecret // empty' "$DATA_FILE")
              if [ -z "$MARKETPLACE_SECRET" ]; then
                echo "Error: Test setup failed - cloudMarketplacesSecret should be present"
                exit 1
              fi

              # Verify that the PURL was NOT updated by create-advisory
              # For marketplace releases, create-advisory should skip the update-purl step
              # So the PURL should remain as set by populate-release-notes (with version, no checksum/URL)
              PURL=$(jq -r '.releaseNotes.content.artifacts[0].purl' "$DATA_FILE")
              EXPECTED_PURL="pkg:generic/amd-azure-disk-image-1-5@1.5"

              if [ "$PURL" != "$EXPECTED_PURL" ]; then
                echo "Error: PURL was updated when it should have been skipped for marketplace releases"
                echo "Expected: $EXPECTED_PURL"
                echo "Got: $PURL"
                exit 1
              fi

              echo "Success: PURL was correctly left unchanged for marketplace release"
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:cee1fd0191e750b0736d8197701d91ce2f308e03
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
