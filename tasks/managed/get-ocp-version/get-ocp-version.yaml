---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-ocp-version
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task to collect and validate OCP version tags from all FBC fragments using `skopeo inspect`.
    Ensures all fragments target the same OCP version for consistent release batching.
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: stored-version
      type: string
      description: Store OCP version number from given Image
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
        - name: orasOptions
          value: $(params.orasOptions)
    - name: get-ocp-version
      image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 250m
      script: |
        #!/usr/bin/env bash
        set -eux

        SNAPSHOT_SPEC_FILE="$(params.dataDir)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "Error: No valid snapshot file was provided."
            exit 1
        fi

        echo -e "\nValidating OCP versions across all components"

        # Get number of components
        num_components=$(jq '.components | length' "${SNAPSHOT_SPEC_FILE}")
        echo "Found $num_components FBC components to validate"

        if [ "$num_components" -eq 0 ]; then
            echo "Error: No components found in snapshot"
            exit 1
        fi

        first_ocp_version=""
        validated_version=""

        for ((i=0; i<num_components; i++)); do
            echo "Processing component $i..."
            fbc_fragment="$(jq -r ".components[$i].containerImage" < "${SNAPSHOT_SPEC_FILE}" | tr -d "\n")"
            echo "  Container image: $fbc_fragment"
            
            # Get image metadata
            image_metadata=$(skopeo inspect --retry-times 3 --raw "docker://${fbc_fragment}")
            
            media_type=$(jq -r .mediaType <<< "${image_metadata}")
            image_base_name=$(jq '.annotations."org.opencontainers.image.base.name"' <<< "${image_metadata}" \
              | cut -d: -f2 | sed 's/"//g')
            
            # Handle multiplatform images
            if [[ "$media_type" == "application/vnd.oci.image.index.v1+json" ]]; then
                echo "  Multiplatform image detected, extracting manifest"
                arch_json=$(get-image-architectures "${fbc_fragment}")
                manifest_image_sha="$(jq -rs 'map(.digest)[0]'  <<< "$arch_json")"
                fbc_fragment="${fbc_fragment%@*}@${manifest_image_sha}"
                
                image_base_name=$(skopeo inspect --retry-times 3 --raw docker://"${fbc_fragment}" \
                 | jq '.annotations."org.opencontainers.image.base.name"' | cut -d: -f2 | sed 's/"//g')
            fi
            
            # Validate OCP version format
            pattern="^v[0-9]\.[0-9]+$"
            if ! echo "${image_base_name}" | grep -Eq "${pattern}"; then
                echo "ERROR: Invalid OCP version format in component $i: '$image_base_name'"
                echo "Expected format: vX.Y (e.g., v4.12)"
                exit 1
            fi
            
            echo "  Extracted OCP version: $image_base_name"
            
            # Validate all components have same OCP version
            if [ $i -eq 0 ]; then
                first_ocp_version="$image_base_name"
                validated_version="$first_ocp_version"
                echo "  ✓ First component OCP version: $first_ocp_version"
            else
                if [ "$image_base_name" != "$first_ocp_version" ]; then
                    echo "ERROR: OCP version mismatch detected!"
                    echo "  Component 0 OCP version: $first_ocp_version"
                    echo "  Component $i OCP version: $image_base_name"
                    echo "All FBC fragments in a release must target the same OCP version"
                    exit 1
                fi
                echo "  ✓ Component $i OCP version matches: $image_base_name"
            fi
        done

        echo ""
        echo "✅ All $num_components components validated successfully"
        echo "Unified OCP version: $validated_version"
        printf "%s" "$validated_version" | tee "$(results.stored-version.path)"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
