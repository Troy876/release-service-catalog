---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-filter-already-released-advisory-images
spec:
  description: |
    Run the filter-already-released-advisory-images managed task and validate it creates an InternalRequest correctly.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: ORAS_OPTIONS
              value: $(params.orasOptions)
            - name: DEBUG
              value: $(params.trustedArtifactsDebug)
        steps:
          - name: create-inputs
            image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_release_plan_admission.json" <<EOF
              {
                "apiVersion": "appstudio.redhat.com/v1alpha1",
                "kind": "ReleasePlanAdmission",
                "metadata": {
                  "name": "test",
                  "namespace": "default"
                },
                "spec": {
                  "applications": ["app"],
                  "origin": "dev"
                }
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json" <<EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "old-component",
                    "repository": "quay.io/redhat-pending/repo",
                    "containerImage": "quay.io/redhat-pending/repo@sha256:abc123"
                  },
                  {
                    "name": "new-component",
                    "repository": "quay.io/redhat-pending/repo2",
                    "containerImage": "quay.io/redhat-pending/repo2@sha256:def456"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" <<EOF
              {}
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: filter-already-released-advisory-images
      params:
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/test_snapshot_spec.json"
        - name: releasePlanAdmissionPath
          value: "$(context.pipelineRun.uid)/test_release_plan_admission.json"
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: synchronously
          value: "false"
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: result
          value: $(tasks.run-task.results.result)
        - name: skip_release
          value: $(tasks.run-task.results.skip_release)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: "$(params.dataDir)"
        - name: environment
          value: $(tasks.run-task.results.environment)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: environment
            type: string
          - name: result
            type: string
          - name: skip_release
            type: string
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: verify
            image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
            script: |
              #!/usr/bin/env bash
              set -ex

              # Count the number of InternalRequests
              requestsCount=$(kubectl get InternalRequest -o json | jq -r '.items | length')

              # Check if the number of InternalRequests is as expected
              if [ "$requestsCount" -ne 1 ]; then
                echo "Unexpected number of InternalRequests. Expected: 1, Found: $requestsCount"
                exit 1
              fi

              internalRequest=$(kubectl get InternalRequest -o json | jq -r '.items[0]')

              # Check if the 'pipelineRef' field contains the correct pipeline path
              expected_pipeline="pipelines/internal/filter-already-released-advisory-images/filter-already-released-advisory-images.yaml"
              pipeline_ref=$(echo "$internalRequest" | jq -r '.spec.pipeline.pipelineRef.params[2].value')
              if [[ "$pipeline_ref" != "$expected_pipeline" ]]; then
                echo "InternalRequest doesn't contain the correct pipeline path"
                exit 1
              fi

              # Check the transformedSnapshot parameter exists and decodes
              transformedSnapshotB64=$(echo "$internalRequest" | jq -r '.spec.params.transformedSnapshot // empty')
              if [ -z "$transformedSnapshotB64" ]; then
                echo "InternalRequest missing transformedSnapshot parameter"
                exit 1
              fi
              transformedSnapshotJson=$(echo "$transformedSnapshotB64" | base64 --decode | gzip -d)
              if ! jq -e 'type=="array"' <<< "$transformedSnapshotJson" >/dev/null; then
                echo "transformedSnapshot should be a JSON array"
                exit 1
              fi
              if [ "$(jq 'length' <<< "$transformedSnapshotJson")" -lt 2 ]; then
                echo "transformedSnapshot should contain at least one entry per component"
                exit 1
              fi
              # Validate per-component transformed entries
              oldEntry=$(jq -c '.[] | select(.originalComponent=="old-component")' <<< "$transformedSnapshotJson")
              if [ -z "$oldEntry" ]; then
                echo "Missing transformed entry for old-component"
                exit 1
              fi
              if [ "$(jq -r '.repository' <<< "$oldEntry")" != "quay.io/redhat-pending/repo" ]; then
                echo "Unexpected repository for old-component in transformedSnapshot"
                exit 1
              fi
              if [[ "$(jq -r '.containerImage' <<< "$oldEntry")" != *"@sha256:amd64digest_abc123" ]]; then
                echo "Unexpected digest for old-component in transformedSnapshot"
                exit 1
              fi
              if [ "$(jq -r '.architecture' <<< "$oldEntry")" != "amd64" ]; then
                echo "Unexpected architecture for old-component in transformedSnapshot"
                exit 1
              fi

              newEntry=$(jq -c '.[] | select(.originalComponent=="new-component")' <<< "$transformedSnapshotJson")
              if [ -z "$newEntry" ]; then
                echo "Missing transformed entry for new-component"
                exit 1
              fi
              if [ "$(jq -r '.repository' <<< "$newEntry")" != "quay.io/redhat-pending/repo2" ]; then
                echo "Unexpected repository for new-component in transformedSnapshot"
                exit 1
              fi
              if [[ "$(jq -r '.containerImage' <<< "$newEntry")" != *"@sha256:amd64digest_def456" ]]; then
                echo "Unexpected digest for new-component in transformedSnapshot"
                exit 1
              fi
              if [ "$(jq -r '.architecture' <<< "$newEntry")" != "amd64" ]; then
                echo "Unexpected architecture for new-component in transformedSnapshot"
                exit 1
              fi

              # Check the origin parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.origin' )" != "dev" ]; then
                echo "InternalRequest has the wrong origin parameter"
                exit 1
              fi

              # Check the advisory_secret_name parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.advisory_secret_name' )" != \
                "create-advisory-stage-secret" ]; then
                echo "InternalRequest has the wrong advisory_secret_name parameter"
                exit 1
              fi

              # Check the taskGitUrl parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.taskGitUrl' )" != "http://localhost" ]; then
                echo "InternalRequest has the wrong taskGitUrl parameter"
                exit 1
              fi

              # Check the taskGitRevision parameter
              if [ "$(echo "$internalRequest" | jq -r '.spec.params.taskGitRevision' )" != "main" ]; then
                echo "InternalRequest has the wrong taskGitRevision parameter"
                exit 1
              fi

              # Check that the filtered snapshot contains only the new component
              base_dir="$(params.dataDir)/$(context.pipelineRun.uid)/results"
              results_file="$base_dir/filter-already-released-advisory-images-results.json"
              filteredSnapshot=$(jq -r '.filtered_snapshot' "$results_file")
              if [ "$(jq -r '.components | length' <<< "$filteredSnapshot")" != "1" ]; then
                echo "Filtered snapshot should contain only one component"
                exit 1
              fi
              if [ "$(jq -r '.components[0].name' <<< "$filteredSnapshot")" != "new-component" ]; then
                echo "Filtered snapshot should contain only the new component"
                exit 1
              fi

              # Check that skip_release is set to false
              if [ "$(params.skip_release)" != "false" ]; then
                echo "skip_release should be false when some components are not released"
                exit 1
              fi

              # Check that the result was properly set
              if [ "$(params.result)" != "Success" ]; then
                echo "Task failed: $(params.result)"
                exit 1
              fi

              # Check that the environment task result was properly set
              if [ "$(params.environment)" != "stage" ]; then
                echo "The environment task result was not set properly"
                exit 1
              fi
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:c11bda9ba25f1a2008dadac3d2f9925a8da3bac1
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
