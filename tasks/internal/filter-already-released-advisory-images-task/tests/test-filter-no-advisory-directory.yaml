---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-filter-no-advisory-directory
spec:
  description: |
    Test the task when the advisory directory for the given origin does not exist.
    Expected behavior: original snapshot is returned unchanged.
  tasks:
    - name: run-filter-task
      taskRef:
        name: filter-already-released-advisory-images-task
      params:
        - name: transformedSnapshot
          # Transformed snapshot with arch-specific image before `gzip -c|base64 -w 0` encoding:
          # '[{"name":"test-component","containerImage":"registry.redhat.io/test@sha256:testarch789","tags":["v1.0"],"repository":"registry.redhat.io/test","rh-registry-repo":"registry.redhat.io/test","originalComponent":"test-component","architecture":"amd64"}]'
          value: 'H4sIAC5tk2gAA32PzQrCMBCE7z7Gntv6g1bNSfDkM5QelnRJAiZbNqtQxHe3OehJvQ3MfMNM94CEkcCAUtbachw5UVKowHJSDInkEtGVhJALWWVqhAaP2gReFuiUPW52rSkaxfr94TjTii6D6eC+blbQVzM8cg7KMv1umjHx9dusC/I3zBJcSHg9f1Z/uVEmBSWrNyknMA7tFp794gX37gLJ+gAAAA=='
        - name: origin
          value: "not-existing-origin"
        - name: advisory_secret_name
          value: "filter-already-released-advisory-images-secret"
        - name: internalRequestPipelineRunName
          value: "$(context.pipelineRun.name)"
    - name: validate-result
      runAfter:
        - run-filter-task
      params:
        - name: result
          value: "$(tasks.run-filter-task.results.result)"
        - name: unreleased_components
          value: "$(tasks.run-filter-task.results.unreleased_components)"
      taskSpec:
        params:
          - name: result
            type: string
          - name: unreleased_components
            type: string
        steps:
          - name: validate
            image: quay.io/konflux-ci/release-service-utils:26e22ecf2c23e7ec8134fede3b40a6e6aef8ac20
            script: |
              #!/usr/bin/env bash
              set -eux

              echo "Validating task result when advisory directory does not exist..."
              [[ "$(params.result)" == "Success" ]]

              # Verify all components are marked as unreleased
              UNRELEASED_COMPONENTS=$(base64 -d <<< "$(params.unreleased_components)" | gunzip)
              UNRELEASED_COUNT=$(jq 'length' <<< "$UNRELEASED_COMPONENTS")
              if [[ "$UNRELEASED_COUNT" -ne 1 ]]; then
                echo "Expected 1 unreleased component, got $UNRELEASED_COUNT"
                exit 1
              fi

              UNRELEASED_NAME=$(jq -r '.[0]' <<< "$UNRELEASED_COMPONENTS")
              if [[ "$UNRELEASED_NAME" != "test-component" ]]; then
                echo "Unexpected unreleased component name: $UNRELEASED_NAME"
                exit 1
              fi

              echo "Validation successful for advisory directory absence!"
